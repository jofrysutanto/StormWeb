@model StormWeb.Models.Staff
@{
    ViewBag.Title = "Create";
}
@using StormWeb.Helper
<script type="text/javascript">
    $(function () {
         $("#errorMessages").dialog({
            autoOpen: false,
        });      


        if ($("#errorMessages > div.validation-summary-errors").html() != null)
        {
            $("#errorMessages").dialog('open');            
        }

        $(".dp :text").attr("readonly","readonly");
        $(".dp :text").datepicker({
            dateFormat: 'mm/dd/yy',
            yearRange: '-100:c',
            changeMonth: true,
            changeYear: true,
        });
         
        $("#showError").click(function () {
            alert($("#errorMessages > div.validation-summary-errors").html());        
        
        });
        
    }); 
</script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
@using (Html.BeginForm("Create", "Staff", FormMethod.Post, new { id = "NewStaff" }))
{ 
@*<a class="btn" href="#" id="showError">Show Error</a> 
   <div style="display: none" id="errorMessages" title="Error!">
        @Html.ValidationSummary(false)
    </div> *@
    
    @Html.ValidationSummary(false, null, new { @class = "error" })
 
    @Html.HiddenFor(x => x.Staff_Id)

    <div class="form-horizontal well">
        <fieldset style="margin-left: 50px;">
            <legend>
                <h2>
                    Create New Staff</h2>
            </legend>
            <div class="control-group">
                @Html.Label("Department", null, new { @class = "control-label form-required" })
                <div class="controls">
                    @Html.DropDownListFor(model => model.Dept_Id, (IEnumerable<SelectListItem>)ViewBag.Dept_Id, "--Select--", new { @class = "chzn-select" })
                    <p class="help-block">
                        @Html.ValidationMessageFor(model => model.Dept_Id)
                    </p>
                </div>
            </div>
            <div class="control-group">
                @Html.Label(" Street Name and Number", null, new { @class = "control-label form-required", style = "width:200px;margin-left: -50px;" })
                <div class="controls">
                    @Html.TextBoxFor(model => model.Address.Address_Name, new { @class = "input-large text-tip", placeholder = " Street Name and Number" })
                    <p class="help-block">
                        @Html.ValidationMessageFor(model => model.Address.Address_Name)
                    </p>
                </div>
            </div>
            <div class="control-group">
                @Html.Label("City", null, new { @class = "control-label form-required" })
                <div class="controls">
                    @Html.TextBoxFor(model => model.Address.City, new { @class = "input-large text-tip", placeholder = "City" })
                    <p class="help-block">
                        @Html.ValidationMessageFor(model => model.Address.City)
                    </p>
                </div>
            </div>
            <div class="control-group">
                @Html.Label("State", null, new { @class = "control-label form-required" })
                <div class="controls">
                    @Html.TextBoxFor(model => model.Address.State, new { @class = "input-large text-tip", placeholder = "State" })
                    <p class="help-block">
                        @Html.ValidationMessageFor(model => model.Address.State)
                    </p>
                </div>
            </div>
            <div class="control-group">
                @Html.Label("Zipcode", null, new { @class = "control-label form-required" })
                <div class="controls">
                    @Html.TextBoxFor(model => model.Address.Zipcode, new { @class = "input-large text-tip", placeholder = "Zipcode" })
                    <p class="help-block">
                        @Html.ValidationMessageFor(model => model.Address.Zipcode)
                    </p>
                </div>
            </div>
            <div class="control-group">
                @Html.Label("Country", null, new { @class = "control-label form-required" })
                <div class="controls">
                    @Html.DropDownListFor(model => model.Address.Country_Id, (IEnumerable<SelectListItem>)ViewBag.CountryList, "--Select--", new { @class = "chzn-select" })
                    <p class="help-block">
                        @Html.ValidationMessageFor(model => model.Address.Country_Id)
                    </p>
                </div>
            </div>
            <div class="control-group">
                @Html.Label("Title", null, new { @class = "control-label form-required" })
                <div class="controls">
                    @Html.DropDownListFor(model => model.Title, (IEnumerable<SelectListItem>)ViewData["TitleValue"], new { @class = "chzn-select" })
                    <p class="help-block">
                        @Html.ValidationMessageFor(model => model.Title)
                    </p>
                </div>
            </div>
            <div class="control-group">
                @Html.Label("Given Name", null, new { @class = "control-label form-required" })
                <div class="controls">
                    @Html.TextBoxFor(model => model.FirstName, new { @class = "input-large text-tip", placeholder = "FirstName" })
                    <p class="help-block">
                        @Html.ValidationMessageFor(model => model.FirstName)
                    </p>
                </div>
            </div>
            <div class="control-group">
                @Html.Label("Surname", null, new { @class = "control-label form-required" })
                <div class="controls">
                    @Html.TextBoxFor(model => model.LastName, new { @class = "input-large text-tip", placeholder = "Zipcode" })
                    <p class="help-block">
                        @Html.ValidationMessageFor(model => model.LastName)
                    </p>
                </div>
            </div>
            <div class="control-group">
                @Html.Label("DOB", null, new { @class = "control-label form-required" })
                <div class="controls">
                    <div class="input-append">
                        @Html.TextBoxFor(model => model.DOB, new { @class = "chooseDate", @readonly = "readonly", @Value = Model.DOB.ToString("dd/MM/yyyy") })
                    </div>
                    <p class="help-block">
                        @Html.ValidationMessageFor(model => model.DOB)
                    </p>
                </div>
            </div>
            <div class="control-group">
                @Html.Label("Date Of Joining", null, new { @class = "control-label form-required" })
                <div class="controls">
                    <div class="input-append">
                        @Html.TextBoxFor(model => model.Date_Of_Joining, new { @class = "chooseDate1", @readonly = "readonly", @Value = Model.Date_Of_Joining.ToString("dd/MM/yyyy") })
                    </div>
                    <p class="help-block">
                        @Html.ValidationMessageFor(model => model.Date_Of_Joining)
                    </p>
                </div>
            </div>
            <div class="control-group">
                @Html.Label("Mobile Number", null, new { @class = "control-label form-required" })
                <div class="controls">
                    @Html.TextBoxFor(model => model.Mobile_Number, new { @class = "input-large text-tip", placeholder = "Mobile Number" })
                    <p class="help-block">
                        @Html.ValidationMessageFor(model => model.Mobile_Number)
                    </p>
                </div>
            </div>
            <div class="control-group">
                @Html.Label("Email", null, new { @class = "control-label form-required" })
                <div class="controls">
                    @Html.TextBoxFor(model => model.Email, new { @class = "input-large text-tip", placeholder = "Email" })
                    <p class="help-block">
                        @Html.ValidationMessageFor(model => model.Email)
                    </p>
                </div>
            </div>
            <div class="control-group">
                @Html.Label("Tax Type", null, new { @class = "control-label form-required" })
                <div class="controls">
                    @Html.TextBoxFor(model => model.Tax_Type, new { @class = "input-large text-tip", placeholder = "Tax Type" })
                    <p class="help-block">
                        @Html.ValidationMessageFor(model => model.Tax_Type)
                    </p>
                </div>
            </div>
            <div class="control-group">
                @Html.Label("Tax Number", null, new { @class = "control-label form-required" })
                <div class="controls">
                    @Html.TextBoxFor(model => model.Tax_Number, new { @class = "input-large text-tip", placeholder = "Tax Number" })
                    <p class="help-block">
                        @Html.ValidationMessageFor(model => model.Tax_Number)
                    </p>
                </div>
            </div>
            <div class="control-group">
                @Html.Label("UserName", null, new { @class = "control-label form-required" })
                <div class="controls">
                    @Html.TextBoxFor(model => model.UserName, new { @class = "input-large text-tip", placeholder = "UserName" })
                    <p class="help-block">
                        @Html.ValidationMessageFor(model => model.UserName)
                    </p>
                </div>
            </div>
            <div class="control-group">
                <div class="controls span7">
                    @Html.Partial("~/Views/Shared/Partial/_BranchListPartial.cshtml", (List<StormWeb.Models.Branch>)ViewBag.Branch)
                </div>
            </div>
            <div class="control-group">
                <div class="controls">
                    <input type="submit" class="btn btn-primary" value="Create" />
                    @Html.Button_DeleteOrCancel("Cancel", "../../Staff")
                </div>
            </div>
        </fieldset>
    </div>
   @* <table style="text-align: left;">
        <tr>
            <th>
                Department
            </th>
            <td>
               
                @Html.DropDownListFor(model => model.Dept_Id, (IEnumerable<SelectListItem>)ViewBag.Dept_Id, "--Select--", new { @class = "chzn-select" })
                <p class="help-block">
                </p>
            </td>
        </tr>
        <tr>
            <th>
                Street Name and Number
            </th>
            <td>
                @Html.TextBoxFor(model => model.Address.Address_Name, new { @class = "text-tip", placeholder = "Street Name" })
            </td>
        </tr>
        <tr>
            <th>
                City
            </th>
            <td>
                @Html.TextBoxFor(model => model.Address.City, new { @class = "text-tip", placeholder = "City" })
            </td>
        </tr>
        <tr>
            <th>
                State
            </th>
            <td>
                @Html.TextBoxFor(model => model.Address.State, new { @class = "text-tip", placeholder = "State" })
            </td>
        </tr>
        <tr>
            <th>
                Zipcode
            </th>
            <td>
                @Html.TextBoxFor(model => model.Address.Zipcode, new { @class = "text-tip", placeholder = "ZipCode", @onkeypress = "return numbers_only(this);" })
            </td>
        </tr>
        <tr>
            <th>
                Country
            </th>
            <td>
                @Html.DropDownListFor(model => model.Address.Country_Id, (IEnumerable<SelectListItem>)ViewBag.CountryList, "--Select--", new { @class = "chzn-select" })
                <p class="help-block">
                    @Html.ValidationMessageFor(model => model.Address.Country_Id)
                </p>
            </td>
        </tr>
        <tr>
            <th>
                Title
            </th>
            <td>
                @Html.DropDownListFor(model => model.Title, (IEnumerable<SelectListItem>)ViewData["TitleValue"], new { @class = "chzn-select" })
            </td>
        </tr>
        <tr>
            <th>
                Given Name
            </th>
            <td>@Html.TextBoxFor(model => model.FirstName, new { @class = "text-tip" })
            </td>
        </tr>
        <tr>
            <th>
                Surname
            </th>
            <td>@Html.TextBoxFor(model => model.LastName, new { @class = "text-tip" })
            </td>
        </tr>
        <tr>
            <th>
                DOB
            </th>
            <td>
                @Html.TextBoxFor(model => model.DOB, new { @class = "chooseDate", @readonly = "readonly", @Value = Model.DOB.ToString("dd/MM/yyyy") })
            </td>
        </tr>
        <tr>
            <th>
                Date Of Joining
            </th>
            <td>
                @Html.TextBoxFor(model => model.Date_Of_Joining, new { @class = "chooseDate1", @readonly = "readonly", @Value = Model.Date_Of_Joining.ToString("dd/MM/yyyy") })
            </td>
        </tr>
        <tr>
            <th>
                Mobile Number
            </th>
            <td>@Html.TextBoxFor(model => model.Mobile_Number, new { @class = "text-tip" })
            </td>
        </tr>
        <tr>
            <th>
                Email
            </th>
            <td>@Html.TextBoxFor(model => model.Email, new { @class = "text-tip" })
            </td>
        </tr>
        <tr>
            <th>
                Tax Type
            </th>
            <td>@Html.TextBoxFor(model => model.Tax_Type, new { @class = "text-tip" })
            </td>
        </tr>
        <tr>
            <th>
                Tax Number
            </th>
            <td>@Html.TextBoxFor(model => model.Tax_Number, new { @class = "text-tip" })
            </td>
        </tr>
        <tr>
            <th>
                UserName
            </th>
            <td>@Html.TextBoxFor(model => model.UserName, new { @class = "text-tip" })
            </td>
        </tr>
        <tr>
            <td colspan="2">
                <div class="span6">
                    @Html.Partial("~/Views/Shared/Partial/_BranchListPartial.cshtml", (List<StormWeb.Models.Branch>)ViewBag.Branch)
                </div>
            </td>
        </tr>
    </table>
    <div class="pull-left">
        <input type="submit" class="btn btn-primary" value="Create" />
        @Html.Button_DeleteOrCancel("Cancel", "Index")
    </div>*@
    <br />
    <br />
    <br />
 
}
<script type="text/javascript">
    $(function () {
        $(".cancelButton").click(function () {
            parent.$.fn.colorbox.close();
        });
    });


    $(document).ready(function () {
        $(".chooseDate").datepicker({
            dateFormat: 'mm/dd/yy',
            changeMonth: true,
            changeYear: true,
            minDate: '-100Y',
            maxDate: '0'
        });
    });
    $(document).ready(function () {
        $(".chooseDate1").datepicker({
            dateFormat: 'mm/dd/yy',
            changeMonth: true,
            changeYear: true,
            minDate: '-100Y',
            maxDate: '+10Y'
        });
    });

    function alphabets_only(e) {
        var keycode;
        if (window.event) keycode = window.event.keyCode;
        else if (event) keycode = event.keyCode;
        else if (e) keycode = e.which;
        else return true;
        if ((keycode >= 65 && keycode <= 90) || (keycode >= 97 && keycode <= 122) || keycode == 32) {
            return true;
        }
        else {
            alert("Allow only Characters");
            return false;
        }
        return true;
    }

    function numbers_only(e) {
        var keycode;
        if (window.event) keycode = window.event.keyCode;
        else if (event) keycode = event.keyCode;
        else if (e) keycode = e.which;
        else return true;
        if ((keycode >= 48 && keycode <= 57) || keycode == 32) {
            return true;
        }
        else {
            alert("Allow only numbers");
            return false;
        }
        return true;
    }
 
</script>
