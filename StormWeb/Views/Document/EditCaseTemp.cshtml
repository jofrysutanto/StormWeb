@model StormWeb.Models.CaseDoc_Template

@{
    ViewBag.Title = "EditCaseTemp";
    Layout = "~/Views/Shared/_LayoutEmpty.cshtml";
}

<h2>Edit General Template</h2>

<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>

@using (Html.BeginForm("EditCaseTemp", "Document", 
        FormMethod.Post, new { id= "edit", enctype = "multipart/form-data" })) {
    @Html.ValidationSummary(true)
    <fieldset>
@*        <legend>CaseDoc_Template</legend>
*@
        @Html.HiddenFor(model => model.CaseDocTemplate_Id)
        
        <input  id="returnId" type="hidden" value="@ViewBag.clientId" name="returnId" />

        <div class="editor-label">
            @Html.LabelFor(model => model.Path)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.Path, new { @readonly = "readonly" })
            @Html.ValidationMessageFor(model => model.Path)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.FileName)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.FileName, new { @readonly = "readonly" })
            @Html.ValidationMessageFor(model => model.FileName)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.UploadedOn)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.UploadedOn, new { @readonly = "readonly" })
            @Html.ValidationMessageFor(model => model.UploadedOn)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.UploadedBy)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.UploadedBy, new { @readonly = "readonly" })
            @Html.ValidationMessageFor(model => model.UploadedBy)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.Comment)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Comment)
            @Html.ValidationMessageFor(model => model.Comment)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.Name)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Name)
            @Html.ValidationMessageFor(model => model.Name)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.Downloadable)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.Downloadable, new { @readonly = "readonly" })
            @Html.ValidationMessageFor(model => model.Downloadable)
        </div>

         <div class="editor-label">
            @Html.LabelFor(model => model.Required)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Required)
            @Html.ValidationMessageFor(model => model.Required)
        </div>

        <p>
            <input type="submit" value="Save" id="save"/>
        </p>
    </fieldset>
}

