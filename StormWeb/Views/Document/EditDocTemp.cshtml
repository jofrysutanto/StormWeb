@model StormWeb.Models.Template_Document

@{
    ViewBag.Title = "Edit";
}

<h2>Edit</h2>

<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>

@using (Html.BeginForm("EditDocTemp", "Document", 
        FormMethod.Post, new { id= "edit", enctype = "multipart/form-data" }))
{
    @Html.ValidationSummary(true)
    <fieldset>
        <legend>Template Documents</legend>

        @Html.HiddenFor(model => model.TemplateDoc_Id)

        <div class="editor-label">
            @Html.LabelFor(model => model.Course_Id, "Course")
        </div>
        <div class="editor-field">
            @Html.DropDownList("Course_Id", String.Empty)
            @Html.ValidationMessageFor(model => model.Course_Id)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.Form_Name)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Form_Name)
            @Html.ValidationMessageFor(model => model.Form_Name)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.Path)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.Path, new { @readonly = "readonly" })
            @Html.ValidationMessageFor(model => model.Path)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.UploadedBy)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.UploadedBy, new { @readonly = "readonly" })
            @Html.ValidationMessageFor(model => model.UploadedBy)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.UploadedOn)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.UploadedOn, new { @readonly="readonly" })
            @Html.ValidationMessageFor(model => model.UploadedOn)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.FileName)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.FileName)
            @Html.ValidationMessageFor(model => model.FileName)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.Comment)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Comment)
            @Html.ValidationMessageFor(model => model.Comment)
        </div>

        <p>
            <input type="submit" value="Save" onclick= 'parent.location.reload()' />
        </p>
    </fieldset>
}

