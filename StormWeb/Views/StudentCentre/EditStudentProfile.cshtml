@model StormWeb.Models.StudentCentreModel
@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_LayoutEmpty.cshtml";
}
<h2>
    Edit</h2>
<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
@using (Html.BeginForm("EditStudentProfile", "StudentCentre", FormMethod.Post))
{
    @Html.ValidationSummary(true, null, new { @class = "error" })
    foreach (var item in Model.caseTable)
    {  
 
      <div id="divEditProfile">
        <table style="text-align: left;">
            @Html.HiddenFor(modelItem => item.Case_Id)
            @Html.HiddenFor(modelItem => item.Student.Student_Id, "studentId")
            @Html.HiddenFor(modelItem => item.Student.Client.Client_Id, "clientId")
            @Html.HiddenFor(modelItem => item.Branch_Id, "clientId")
            <tr>
                <th>
                    Username
                </th>
                <td>
                    @Html.TextBoxFor(modelItem => item.Student.UserName, new { @readonly = "readonly" })
                    @Html.ValidationMessageFor(modelItem => item.Student.UserName)
                </td>
                <td style="width: 20px;">
                </td>
                <th>
                    Course Choice
                </th>
                <td>
                    @if (StormWeb.Helper.CookieHelper.isStaff())
                    {
                        @Html.TextBoxFor(modelItem => item.Student.Course_Choice) 
                    }
                    else
                    {
                        @Html.TextBoxFor(modelItem => item.Student.Course_Choice, new { @readonly = "readonly" })
                    }
                </td>
            </tr>
            <tr>
                <th>
                    Title
                </th>
                <td>
                    <div class="control-group">
                        <div class="controls">
                            @Html.DropDownListFor(modelItem => item.Student.Client.Title, (SelectList)ViewData["TitleValue"], new { @class = "chzn-select" })
                            @Html.ValidationMessageFor(modelItem => item.Student.Client.Title)
                        </div>
                    </div>
                </td>
                <td>
                </td>
                <th>
                    DOB
                </th>
                <td>
                 <div class="input-append">
                    @Html.TextBoxFor(modelItem => item.Student.Client.Dob, new { @class = "chooseDate", @readonly = "readonly" })
                    @Html.ValidationMessageFor(modelItem => item.Student.Client.Dob)
                 </div>
                </td>
            </tr>
            <tr>
                <th>
                    Given Name
                </th>
                <td>
                    @Html.EditorFor(modelItem => item.Student.Client.GivenName, null, "givenName")
                    @Html.ValidationMessageFor(modelItem => item.Student.Client.GivenName)
                </td>
                <td>
                </td>
                <th>
                    Surname
                </th>
                <td>
                    @Html.EditorFor(modelItem => item.Student.Client.LastName, null, "lastName")
                    @Html.ValidationMessageFor(modelItem => item.Student.Client.LastName)
                </td>
            </tr>
            <tr>
                <th>
                    Contact Number
                </th>
                <td>
                    @Html.EditorFor(modelItem => item.Student.Client.ContactNumber, null, "contactNumber")
                    @Html.ValidationMessageFor(modelItem => item.Student.Client.ContactNumber)
                </td>
                <td>
                </td>
                <th>
                    Secondary Contact Number
                </th>
                <td>
                    @Html.EditorFor(modelItem => item.Student.Client.SecondaryContactNumber, null, "secondaryContactNumber")
                </td>
            </tr>
            <tr>
                <th>
                    Address
                </th>
                <td>
                    @Html.EditorFor(modelItem => item.Student.Client.Address.Address_Name, null, "addressName")
                </td>
                <td>
                </td>
                <th>
                    City
                </th>
                <td>
                    @Html.EditorFor(modelItem => item.Student.Client.Address.City, null, "city")
                </td>
            </tr>
            <tr>
                <th>
                    State
                </th>
                <td>
                    @Html.EditorFor(modelItem => item.Student.Client.Address.State, null, "state")
                </td>
                <td>
                </td>
                <th>
                    Zipcode
                </th>
                <td>
                    @Html.EditorFor(modelItem => item.Student.Client.Address.Zipcode, null, "zipCode")
                </td>
            </tr>
            <tr>
                <th>
                    Country Name
                </th>
                <td>
                    @Html.EditorFor(modelItem => item.Student.Client.Address.Country.Country_Name, null, "countryName")
                </td>
                <td>
                </td>
                <th>
                    Email
                </th>
                <td>
                    @Html.EditorFor(modelItem => item.Student.Client.Email, null, "email")
                    @Html.ValidationMessageFor(modelItem => item.Student.Client.Email)
                </td>
            </tr>
            <tr>
                <th>
                    Services
                </th>
                <td>
                    @if (StormWeb.Helper.CookieHelper.isStaff())
                    {
                        @Html.TextBoxFor(modelItem => item.Student.Client.Services)
                    }
                    else
                    {
                        @Html.TextBoxFor(modelItem => item.Student.Client.Services, new { @readonly = "readonly" })
                    }
                    @Html.ValidationMessageFor(modelItem => item.Student.Client.Services)
                </td>
                <td>
                </td>
                <th>
                    Marital Status
                </th>
                <td>
                    <div class="control-group">
                        <div class="controls">
                            @Html.DropDownListFor(modelItem => item.Student.Client.MaritalStatus, (SelectList)ViewData["MaritalStatus"], new { @class = "chzn-select" })
                        </div>
                    </div>
                </td>
            </tr>
            <tr>
                <th>
                    Related Kin Detail
                </th>
                <td>
                    @Html.EditorFor(modelItem => item.Student.Client.RelatedKinDetail, null, "relatedKinDetail")
                </td>
                <th>
                </th>
                <th>
                    Nationality
                </th>
                <td>
                    @if (StormWeb.Helper.CookieHelper.isStaff())
                    {
                        @Html.TextBoxFor(modelItem => item.Student.Client.Nationality)
                    }
                    else
                    {
                        @Html.TextBoxFor(modelItem => item.Student.Client.Nationality, new { @readonly = "readonly" })                         
                    }
                </td>
            </tr>
            <tr>
                <th>
                    Registered on
                </th>
                <td>
                  <div class="input-append">
                    @Html.TextBoxFor(modelItem => item.Student.Client.Registered_On.Value, new { @class = "chooseDate", @readonly = "readonly" })
                    </div>
                </td>
                <th>
                </th>
                <th>
                    Preferred Country
                </th>
                <td>
                    @Html.EditorFor(modelItem => item.Student.Client.PreferredCountry, null, "preferredCountry")
                </td>
            </tr>
            <tr>
                <th>
                    Are you In Preferred Country
                </th>
                <td>
                    <div class="control-group">
                        <div class="controls">
                            <label class="radio">
                                @Html.RadioButtonFor(model => item.Student.Client.InPreferredCountry, true, new { id = "InPreferredCountry_True", @class = "radio-b" })
                                Yes</label>
                            <label class="radio">
                                @Html.RadioButtonFor(model => item.Student.Client.InPreferredCountry, false, new { id = "InPreferredCountry_False", @class = "radio-b" })
                                No</label>
                        </div>
                    </div>
                </td>
                <td>
                </td>
                @if (item.Student.Client.InPreferredCountry == true)
                {
                    <th>
                        Preferred Country Visa Status
                    </th>
                    <td>
                        @Html.EditorFor(modelItem => item.Student.Client.PreferredCountryVisaStatus, null, "preferredCountryVisaStatus")
                    </td>
                }
            </tr>
        </table>
        <div class="modal-footer">
            <input type="submit" class="btn btn-info" value="Save Changes" />
            <input type="button" id="closeModal" class="btn btn-danger cancelButton" value="Cancel" />
        </div>
    </div>
 
    }   
} 


<script type="text/javascript">
    $(function () {
        $(".cancelButton").click(function () {
            parent.$.fn.colorbox.close();
        });
    }); 
 
    $(function(){  
    
    @{
   
        if (ViewBag.successEdit != null)
        { 
        @:parent.location='/StudentCentre/Profile/@(Model.caseTable.First().Student_Id)?message=edit';
        @:parent.$.fn.colorbox.close();
        };
    }
     });

  
       $(document).ready(function () { 
        $(".chooseDate").datepicker({
            dateFormat: 'mm/dd/yy',
            changeMonth: true,
            changeYear: true,
            minDate: '-100Y',
            maxDate: '0',
            showOn: "button",
            buttonImage: "../../Content/img/calendar_btn.png",
            buttonImageOnly: true
        });
    });

     
</script>
